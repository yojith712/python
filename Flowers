{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNOeSU3iAxCCOmVZCtP1Q2P",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yojith712/python/blob/main/Flowers\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sVKzJHQezi1s",
        "outputId": "f15dd183-dd0d-4236-8418-930efc81cf2d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     sepal_length  sepal_width  petal_length  petal_width    species\n",
            "0             5.1          3.5           1.4          0.2     setosa\n",
            "1             4.9          3.0           1.4          0.2     setosa\n",
            "2             4.7          3.2           1.3          0.2     setosa\n",
            "3             4.6          3.1           1.5          0.2     setosa\n",
            "4             5.0          3.6           1.4          0.2     setosa\n",
            "..            ...          ...           ...          ...        ...\n",
            "145           6.7          3.0           5.2          2.3  virginica\n",
            "146           6.3          2.5           5.0          1.9  virginica\n",
            "147           6.5          3.0           5.2          2.0  virginica\n",
            "148           6.2          3.4           5.4          2.3  virginica\n",
            "149           5.9          3.0           5.1          1.8  virginica\n",
            "\n",
            "[150 rows x 5 columns]\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "Data source must be a DataFrame or Mapping, not <class 'matplotlib.axes._axes.Axes'>.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3087933711.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflower\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mflower\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatterplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflower\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"petal_length\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"sepal_length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mflower\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflower\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"sepal_length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mflower\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mboxplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflower\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"species\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"petal_length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mpt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36mhistplot\u001b[0;34m(data, x, y, hue, weights, stat, bins, binwidth, binrange, discrete, cumulative, common_bins, common_norm, multiple, element, fill, shrink, kde, kde_kws, line_kws, thresh, pthresh, pmax, cbar, cbar_ax, cbar_kws, palette, hue_order, hue_norm, color, log_scale, legend, ax, **kwargs)\u001b[0m\n\u001b[1;32m   1377\u001b[0m ):\n\u001b[1;32m   1378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1379\u001b[0;31m     p = _DistributionPlotter(\n\u001b[0m\u001b[1;32m   1380\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1381\u001b[0m         \u001b[0mvariables\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m    108\u001b[0m     ):\n\u001b[1;32m    109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 110\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/_base.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m    632\u001b[0m         \u001b[0;31m# information for numeric axes would be information about log scales.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    633\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_var_ordered\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"x\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"y\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m}\u001b[0m  \u001b[0;31m# alt., used DefaultDict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 634\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign_variables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    635\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    636\u001b[0m         \u001b[0;31m# TODO Lots of tests assume that these are called to initialize the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/_base.py\u001b[0m in \u001b[0;36massign_variables\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m    677\u001b[0m             \u001b[0;31m# to centralize / standardize data consumption logic.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput_format\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"long\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 679\u001b[0;31m             \u001b[0mplot_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPlotData\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    680\u001b[0m             \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    681\u001b[0m             \u001b[0mnames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/_core/data.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, variables)\u001b[0m\n\u001b[1;32m     55\u001b[0m     ):\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhandle_data_source\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m         \u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_assign_variables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/seaborn/_core/data.py\u001b[0m in \u001b[0;36mhandle_data_source\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    276\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMapping\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    277\u001b[0m         \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"Data source must be a DataFrame or Mapping, not {type(data)!r}.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 278\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    279\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    280\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Data source must be a DataFrame or Mapping, not <class 'matplotlib.axes._axes.Axes'>."
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as pt\n",
        "\n",
        "\n",
        "flower=sns.load_dataset(\"iris\")\n",
        "print(flower)\n",
        "flower=sns.scatterplot(data=flower,x=\"petal_length\",y=\"sepal_length\")\n",
        "flower=sns.histplot(data=flower,x=\"sepal_length\")\n",
        "flower=sns.boxplot(data=flower,x=\"species\",y=\"petal_length\")\n",
        "pt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "wW7en77i0zmU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as pt\n",
        "\n",
        "\n",
        "flower=sns.load_dataset(\"iris\")\n",
        "print(flower)\n",
        "sns.histplot(data=flower,x=\"sepal_length\")\n",
        "pt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 701
        },
        "id": "ztvte3oq2aZu",
        "outputId": "20e1b542-739d-4ef5-8f67-d78b7ca5a92b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     sepal_length  sepal_width  petal_length  petal_width    species\n",
            "0             5.1          3.5           1.4          0.2     setosa\n",
            "1             4.9          3.0           1.4          0.2     setosa\n",
            "2             4.7          3.2           1.3          0.2     setosa\n",
            "3             4.6          3.1           1.5          0.2     setosa\n",
            "4             5.0          3.6           1.4          0.2     setosa\n",
            "..            ...          ...           ...          ...        ...\n",
            "145           6.7          3.0           5.2          2.3  virginica\n",
            "146           6.3          2.5           5.0          1.9  virginica\n",
            "147           6.5          3.0           5.2          2.0  virginica\n",
            "148           6.2          3.4           5.4          2.3  virginica\n",
            "149           5.9          3.0           5.1          1.8  virginica\n",
            "\n",
            "[150 rows x 5 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}